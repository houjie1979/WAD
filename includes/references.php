<?php// If it's going to need the database, then it's // probably smart to require it before we start.require_once(LIB_PATH.DS.'database.php');class References extends DatabaseObject {		protected static $table_name = "refs";	protected static $db_fields = array('refcode', 'authors', 'journal', 'vol', 'issue',	'pages', 'year', 'title', 'lang', 'keywords');		public $refcode;	public $authors;	public $journal;	public $vol;	public $issue;	public $pages;	public $year;	public $title;	public $lang;	public $keywords;	public function record_exists(){	  	global $database;		$select_sql = "SELECT COUNT(*) FROM refs WHERE refcode = '{$this->refcode}'";		$result_set = $database->query($select_sql);		$rows = array_shift($database->fetch_array($result_set));		if(!empty($rows)) {	return true; } else return false;	}				  public function code_name() {    if(isset($this->authors) && isset($this->refcode)) {      return $this->refcode . " " . $this->authors . " " . $this->journal . " " .	  		$this->vol . " " . $this->issue . " " . $this->pages . " " .			$this->year . " " . $this->title . " " . $this->lang ;    } else {      return "";    }  }public static function ref_sql_where($refcode, $authors, $journal, $vol, 			$issue, $pages, $year, $title, $language, $keywords){				$spars=0;				$sql = "";		if($refcode !="") {$sql .=" refcode= '{$refcode}' "; $spars++;}		if($authors !=""){			if($spars>0) $sql .=" AND LOCATE( '{$authors}', authors) ";			else $sql .=" LOCATE( '{$authors}', authors) ";			$spars++;		}		if($journal !=""){			if($spars>0) $sql .=" AND LOCATE( '{$journal}', journal) ";			else $sql .=" LOCATE( '{$journal}', journal) ";			$spars++;		}		if($vol !=""){			if($spars>0) $sql .=" AND vol= '{$vol}' ";			else $sql .=" vol= '{$vol}' ";			$spars++;		}		if($issue !=""){			if($spars>0) $sql .=" AND issue= '{$issue}' ";			else $sql .=" issue= '{$issue}' ";			$spars++;		}		if($pages !=""){			if($spars>0) $sql .=" AND LOCATE( '{$pages}', pages) ";			else $sql .=" LOCATE( '{$pages}', pages) ";			$spars++;		}		if($year !=""){			if($spars>0) $sql .=" AND year= '{$year}' ";			else $sql .=" year= '{$year}' ";			$spars++;		}		if($title !=""){			if($spars>0) $sql .=" AND LOCATE('{$title}',title) ";			else $sql .=" LOCATE('{$title}',title) ";			$spars++;		}		if($language !=""){			if($spars>0) $sql .=" AND lang= '{$language}' ";			else $sql .=" lang= '{$language}' ";			$spars++;		}		if($keywords !=""){			if($spars>0) $sql .=" AND keywords= '{$keywords}' ";			else $sql .=" LOCATE('{$keywords}', keywords) ";			$spars++;		}	return $sql;	}		public static function reference_search($sql, $limit, $offset){	//commonize - DONE abstracted			$select_sql = "SELECT * FROM refs WHERE " . $sql;		$select_sql .= " LIMIT {$limit} ";			$select_sql .= " OFFSET {$offset}";		return self::find_by_sql($select_sql);		}	public static function sql_count($sql){			// commonize - DONE abstracted		global $database;		$select_sql = "SELECT COUNT(*) FROM refs WHERE " . $sql;							$result_set = $database->query($select_sql);		$row = $database->fetch_array($result_set);		return array_shift($row);	}		// Common Database Methods	public static function find_all() {		return self::find_by_sql("SELECT * FROM ".self::$table_name. " ORDER BY ".self::$db_fields[0] );  }    public static function find_by_id($id=0) {    $result_array = self::find_by_sql("SELECT * FROM ".self::$table_name." WHERE id={$id} LIMIT 1");		return !empty($result_array) ? array_shift($result_array) : false;  }    public static function find_by_sql($sql="") {    global $database;    $result_set = $database->query($sql);    $object_array = array();    while ($row = $database->fetch_array($result_set)) {      $object_array[] = self::instantiate($row);    }    return $object_array;  }  public static function find_by_sql_lim($sql, $limit, $offset){		// commonized	if(!empty($sql)) {		$select_sql = "SELECT * FROM " . self::$table_name . " WHERE " . $sql;		$select_sql .= " ORDER BY year DESC, refcode ASC ";		$select_sql .= " LIMIT {$limit} ";			$select_sql .= " OFFSET {$offset}";		return self::find_by_sql($select_sql);	}	else return NULL;  }    public static function count_all(){  	global $database;	$sql = "SELECT COUNT(*) FROM ".self::$table_name;	$result_set = $database->query($sql);	$row = $database->fetch_array($result_set);	return array_shift($row);	}  public static function count_in_sql($sql){	// commonized  	global $database;	if(!empty($sql)){		$select_sql = "SELECT COUNT(*) FROM ".self::$table_name;		$select_sql .= " WHERE " . $sql;		$result_set = $database->query($select_sql);		$row = $database->fetch_array($result_set);		return array_shift($row);	}	else return 0;	}	private static function instantiate($record) {		// Could check that $record exists and is an array    $object = new self;		// Simple, long-form approach:		// $object->id 				= $record['id'];		// $object->username 	= $record['username'];		// $object->password 	= $record['password'];		// $object->first_name = $record['first_name'];		// $object->last_name 	= $record['last_name'];				// More dynamic, short-form approach:		foreach($record as $attribute=>$value){		  if($object->has_attribute($attribute)) {		    $object->$attribute = $value;		  }		}		return $object;	}	public static function instantiateit($record) {		// Could check that $record exists and is an array    $object = new self;//		 Simple, long-form approach:	//	 $object->id 				= $record['id'];		// $object->username 	= $record['username'];		// $object->password 	= $record['password'];		// $object->first_name = $record['first_name'];		// $object->last_name 	= $record['last_name'];				// More dynamic, short-form approach:		foreach($record as $attribute=>$value){		  if($object->has_attribute($attribute)) {		    $object->$attribute = $value;		  }		}		return $object;	}		private function has_attribute($attribute) {	  // We don't care about the value, we just want to know if the key exists	  // Will return true or false	  return array_key_exists($attribute, $this->attributes());	}	protected function attributes() { 		// return an array of attribute names and their values	  $attributes = array();	  foreach(self::$db_fields as $field) {	    if(property_exists($this, $field)) {	      $attributes[$field] = $this->$field;	    }	  }	  return $attributes;	}		protected function sanitized_attributes() {	  global $database;	  $clean_attributes = array();	  // sanitize the values before submitting	  // Note: does not alter the actual value of each attribute	  foreach($this->attributes() as $key => $value){	    $clean_attributes[$key] = $database->escape_value($value);	  }	  return $clean_attributes;	}		public function save() {	  // A new record won't have an id yet.	  return isset($this->id) ? $this->update() : $this->create();	}		public function create() {		global $database;		$database->close_connection();		$database->open_admin_connection();		// Don't forget your SQL syntax and good habits:		// - INSERT INTO table (key, key) VALUES ('value', 'value')		// - single-quotes around all values		// - escape all values to prevent SQL injection		$attributes = $this->sanitized_attributes();	  $sql = "INSERT INTO ".self::$table_name." (";		$sql .= join(", ", array_keys($attributes));	  $sql .= ") VALUES ('";		$sql .= join("', '", array_values($attributes));		$sql .= "')";			  if($database->query($sql)) {	    $this->id = $database->insert_id();	    return true;	  } else {	    return false;	  }	}	public function createrecord() {		global $database;		// Don't forget your SQL syntax and good habits:		// - INSERT INTO table (key, key) VALUES ('value', 'value')		// - single-quotes around all values		// - escape all values to prevent SQL injection		$attributes = $this->sanitized_attributes();	  	$sql = "INSERT INTO ".self::$table_name." (";		$sql .= join(", ", array_keys($attributes));	  	$sql .= ") VALUES (\"";		$sql .= join("\", \"", array_values($attributes));		$sql .= "\")";/*	  if($database->query($sql)) {	    $this->id = $database->insert_id();	    return true;	  } else {	    return false;	  }*/	}	public function update() {	  global $database;		// Don't forget your SQL syntax and good habits:		// - UPDATE table SET key='value', key='value' WHERE condition		// - single-quotes around all values		// - escape all values to prevent SQL injection		$attributes = $this->sanitized_attributes();		$attribute_pairs = array();		foreach($attributes as $key => $value) {		  $attribute_pairs[] = "{$key}='{$value}'";		}		$sql = "UPDATE ".self::$table_name." SET ";		$sql .= join(", ", $attribute_pairs);		$sql .= " WHERE id=". $database->escape_value($this->id);	  $database->query($sql);	  return ($database->affected_rows() == 1) ? true : false;	}	public function delete() {		global $database;		// Don't forget your SQL syntax and good habits:		// - DELETE FROM table WHERE condition LIMIT 1		// - escape all values to prevent SQL injection		// - use LIMIT 1	  $sql = "DELETE FROM ".self::$table_name;	  $sql .= " WHERE id=". $database->escape_value($this->id);	  $sql .= " LIMIT 1";	  $database->query($sql);	  return ($database->affected_rows() == 1) ? true : false;			// NB: After deleting, the instance of User still 		// exists, even though the database entry does not.		// This can be useful, as in:		//   echo $user->first_name . " was deleted";		// but, for example, we can't call $user->update() 		// after calling $user->delete().	}}?>